<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->
    <title><%=title%></title>

    <!-- 新 Bootstrap 核心 CSS 文件 -->
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css">
    <!-- 可选的Bootstrap主题文件（一般不用引入） -->
    <link rel="stylesheet" href="css/bootstrap/bootstrap-theme.min.css">
    <link rel="stylesheet" href="css/bootstrap/bootstrap-select.min.css">

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- jQuery文件。务必在bootstrap.min.js 之前引入 -->
    <script src="js/libs/jquery/jquery.min.js"></script>
    <!-- 最新的 Bootstrap 核心 JavaScript 文件 -->
    <script src="js/libs/bootstrap/bootstrap.min.js"></script>
    <script src="js/bootstrap-select.min.js"></script>
    <script src="js/eventproxy.js"></script>
    <style type="text/css">
        body {
            padding-top: 60px;
        }
        ._sidebar {
            background-color: #f5f5f5;
            border-right: 1px solid #eee;
            bottom: 0;
            display: block;
            left: 0;
            overflow-x: hidden;
            overflow-y: auto;
            padding: 0px;
            position: fixed;
            top: 51px;
            z-index: 1000;
        }
        ._nav-sidebar > li > a {
            padding-left: 20px;
            padding-right: 20px;
        }
        ._example  ._highlight {
            border-bottom-left-radius: 4px;
            border-bottom-right-radius: 4px;
            border-width: 1px;
            margin-left: 0;
            margin-right: 0;
            margin-top: -16px;
        }
        ._highlight {
            background-color: #f7f7f9;
            border: 1px solid #e1e1e8;
            border-radius: 4px;
            margin-bottom: 0px;
            padding: 0px;
        }
        ._example {
            background-color: #fff;
            border-color: #ddd;
            border-radius: 4px 4px 0 0;
            border-width: 1px;
            box-shadow: none;
            margin-left: 0;
            margin-right: 0;
        }
        ._input{
            border-top: none;
            border-left: none;
            border-right: none;
            box-shadow: none;
            border-radius: 0px;
        }
        ._input:focus{
            box-shadow: none;
        }
        ._tool_div{
            padding-top:12px
        }
        li.active{border-bottom:3px #66afe9 solid;}
    </style>

</head>
<body>

<%- include('nav') -%>
<!--********************************-->
<div class="container-fluid">
    <div class="row">

        <div class="col-md-2 _sidebar">
            <ul class="nav nav-justified" role="tablist">
                <li role="presentation" class="active"><a href="#apiList" aria-controls="apiList" role="tab" data-toggle="tab">apis</a></li>
                <li role="presentation"><a href="#historyList" aria-controls="historyList" role="tab" data-toggle="tab">history</a></li>
            </ul>
            <!-- request tab panes -->
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="apiList">
                    <ul class="nav _nav-sidebar" >
                        <!--<li><a href="javascript:void(0)" class="_apiList" id=""><code>GET</code>http://www.baidu.com</a></li>-->
                    </ul>
                </div>
                <div role="tabpanel" class="tab-pane" id="historyList">
                    <ul class="nav _nav-sidebar">
                    </ul>
                </div>
            </div>
        </div>


        <div class="col-md-9 col-md-offset-2"  style="padding:10px;">
            <!-- 请求框 start -->
            <div style="border:1px #999 solid;border-radius:5px;padding:10px;margin:5px;">
                <!-- 地址栏 start -->
                <div class="row ">
                    <div class="col-md-9">
                        <div class="input-group">
                            <div class="input-group-btn">
                                <select class="selectpicker " id="method" data-width="80px">
                                    <option value="GET">GET</option>
                                    <option value="POST">POST</option>
                                </select>
                            </div>
                            <input type="text" class="form-control" id="url" value="">
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-danger">参数</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="btn-group" role="group">
                            <button type="button" id="send" class="btn btn-danger">发送</button>
                            <button type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="caret"></span>
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a href="#">发送</a></li>
                                <li><a href="#">Another action</a></li>
                                <li><a href="#">Something else here</a></li>
                                <li role="separator" class="divider"></li>
                                <li><a href="#">Separated link</a></li>
                            </ul>
                        </div>
                        <button type="button" class="btn btn-danger ">保存</button>
                    </div>
                </div>
                <!-- 地址栏 end -->
                <!-- 参数tab start -->
                <div class="row">
                    <div class="col-md-12">
                        <!-- request tabs -->
                        <ul class="nav navbar-nav" role="tablist"> <!--nav-tabs-->
                            <li role="presentation" class="active"><a href="#reqHeader" aria-controls="reqHeader" role="tab" data-toggle="tab">headers</a></li>
                            <li role="presentation"><a href="#reqBody" aria-controls="reqBody" role="tab" data-toggle="tab">body</a></li>
                        </ul>
                        <!-- request tab panes -->
                        <div class="tab-content col-md-12 ">
                            <div role="tabpanel" class="tab-pane active _inputDiv" id="reqHeader">
                                <div class="row _inputRow">
                                    <div class="col-xs-4">
                                        <input type="text" name="key" class="form-control _input" placeholder="name">
                                    </div>
                                    <div class="col-xs-4">
                                        <input type="text" name="value" class="form-control _input"  placeholder="value">
                                    </div>
                                    <div class="col-xs-2 _tool_div">
                                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                    </div>
                                </div>

                            </div>
                            <div role="tabpanel" class="tab-pane _inputDiv" id="reqBody">
                                <div class="row _inputRow">
                                    <div class="col-xs-4">
                                        <input type="text" name="key" class="form-control _input" placeholder="name">
                                    </div>
                                    <div class="col-xs-4">
                                        <input type="text" name="value" class="form-control _input"  placeholder="value">
                                    </div>
                                    <div class="col-xs-2 _tool_div">
                                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="apiDataDiv" style="display:none">
                </div>
                <!-- 参数tab end -->
            </div>
            <!-- 请求框 end -->
            <!-- 响应框 start -->
            <div>
                <!--选项卡状态栏 start-->
                <!-- response tabs   border:1px #999 solid;border-radius:5px;padding:10px;margin:5px;-->
                <div style="border:1px #999 solid;border-radius:5px;padding:0px 15px;margin:5px;">
                    <div class="row _highlight" >
                        <ul class="nav navbar-nav" role="tablist"> <!--nav-tabs-->
                            <li role="presentation" class="active"><a href="#response_body" aria-controls="response_body" role="tab" data-toggle="tab">response_body</a></li>
                            <li role="presentation"><a href="#response_headers" aria-controls="response_headers" role="tab" data-toggle="tab">response_headers</a></li>
                        </ul>
                    </div>
                    <!-- response tab panes -->

                    <div class="row _example">
                        <div class="tab-content col-md-12 ">
                            <div role="tabpanel" class="tab-pane active" id="response_body">
                                <div style="border:1px #999 solid;border-radius:5px;padding:10px 0px;margin:10px 0px;">
                                    <code>
                                        {
                                        "errno": 0,
                                        "errmsg": "success",
                                        "time": 1462426969,
                                        "data": {
                                        "pageInfo": {
                                        "totalCount": 147,
                                        "pageCount": 8,
                                        "targetPage": 1,
                                        "pageSize": 20
                                        },
                                        "records": []
                                        }
                                        }
                                    </code>
                                </div>
                            </div>
                            <div role="tabpanel" class="tab-pane" id="response_headers">
                                testt

                            </div>
                        </div>
                    </div>
                    <!--选项卡状态栏 end-->
                </div>
                <!-- 响应框 end -->
            </div>


        </div>
    </div>

    <!--================================================== -->
    <script>/*
        $('.selectpicker').selectpicker({
            style: 'btn-info',
            size: 20
        });*/
        var itemId = '572c01e9017a23540c584824';
        var apiId = '2';
        (function(itemId, apiId){

            //键值对的输入框先clone一个下来
            var kvInputRow = $('._inputRow').eq(0);

            //接口数据存放div
            var apiDataDiv = $('#apiDataDiv');

            //接口数据存放input
            var apiDataInput = $('<input type="hidden">');

            //数据接口地址
            this.apiAddress = {
                'getApiListByItemId' : '/apis/list',
                'getApiListByHistory' : '/history/list',
                'sendReuest' : '/send',
                'getApiInfoByItemApiId' : '/apis/info',
                'getApiInfoByHistoryId' : '/history/info'
            }

            var ep = new EventProxy();

            ep.all('apiList', 'historyList', function(apiList, historyList){
                if(apiList.data.length > 0){
                    getApiInfoByItemApiId(apiList.data[0]['_id']);
                }else if(historyList.data.length > 0){
                    getApiInfoByHistoryId(historyList.data[0]['md5Api']);
                }else{
                    alert('没有任何相关接口');
                }
            });

            var apisUl = $('#apiList ul');
            var historyUl = $('#historyList ul');

            var getApiInfoByItemApiId = function(apiId){
                //var apiId = '57369e64e71d68b40cceaa63';
                this.ajax(apiAddress.getApiInfoByItemApiId, 'GET', {'apiId':apiId}, function(msg){
                    msg.errno == 0 && renderApiData(msg.data);
                });
            }

            var getApiInfoByHistoryId = function(md5Api){
                this.ajax(apiAddress.getApiInfoByHistoryId, 'GET', {'md5Api':md5Api}, function(msg){
                    msg.errno == 0 && renderApiData(msg.data);
                });
            }
            //获取组的api列表
            var getApiListByItemId = function(itemId){
                this.ajax(apiAddress.getApiListByItemId, 'GET', {'itemId':itemId}, function(msg){
                    if(msg.errno!=0){
                        alert(msg.msg);
                    }else{
                        if(msg.data.length == 0){
                            apisUl.append('<li><a href="javascript:void(0)" class="" id=""><code>没有相关接口</code></a></li>')
                        }else{
                            $.each(msg.data, function(index, obj){
                                var li = '<li><a href="javascript:void(0)" id="'+obj._id+'"><code>'+obj.method+'</code>'+obj.url+'</a></li>';
                                apisUl.append(li);
                            });
                        }
                        ep.emit('apiList', msg);
                    }
                });
            }
            //获取历史列表
            var getApiListByHistory = function(itemId){
                this.ajax(apiAddress.getApiListByHistory, 'GET', {'itemId':itemId}, function(msg){
                    if(msg.errno!=0){
                        alert(msg.msg);
                    }else{
                        if(msg.data.length == 0){
                            historyUl.append('<li><a href="javascript:void(0)" class="" id=""><code>没有相关接口</code></a></li>')
                        }else{
                            $.each(msg.data, function(index, obj){
                                var li = '<li><a href="javascript:void(0)" id="'+obj.md5Api+'"><code>'+obj.method+'</code>'+obj.url+'</a></li>';
                                historyUl.append(li);
                            });
                        }
                        ep.emit('historyList', msg);
                    }
                });
            }
            var getApiData = function(){
                var apiId = $(this).find('a').attr('id');
                getApiInfoByItemApiId(apiId);
            }

            var getHistoryData = function(){
                var md5Api = $(this).find('a').attr('id');
                getApiInfoByHistoryId(md5Api);
            }
            //移除键值对参数
            var paramsRemove = function(){
                var inputRow = $(this).parents('div._inputRow');
                //如果是最后一个则不移除,只是清空数据
                if(inputRow.siblings().length > 0){
                    inputRow.remove();
                }else{
                    inputRow.find('input').val('');
                }
            }

            //创建键值对输入框
            var createInput = function(){
                var inputRow = $(this).parents('div._inputRow');
                //如果是最后一个才新建
                if(inputRow.siblings().length == inputRow.index()){
                    var _inputRow = inputRow.clone();
                    _inputRow.find('input').val('');
                    inputRow.after(_inputRow);
                }
            }
            //对数据元字段在调试界面对应的渲染方法put和获取方法get
            var apiDataMapFunc = {
                'method' : {
                    obj : $('#method'),
                    put : function(data){
                        this.obj.find("option[text='"+data+"']").attr("selected",true);
                    },
                    get : function(){
                        return this.obj.val();
                    }
                },
                'title' : {
                    obj : $('title'),
                    put : function(data){
                        this.obj.text(data);
                    },
                    get : function(){
                        return this.obj.text();
                    }
                },
                'url' : {
                    obj : $('#url'),
                    put : function(data){
                        this.obj.val(data);
                    },
                    get : function(){
                        return this.obj.val();
                    }
                },
                'reqHeader' : {
                    put : function(data){
                        var reqHeader = $('#reqHeader');
                        reqHeader.html('');
                        if(data){
                            for (var x in data) {
                                var inp = kvInputRow.clone();
                                inp.find('input[name=key]').val(x);
                                inp.find('input[name=value]').val(data[x]);
                                reqHeader.append(inp);
                            }
                        }
                        reqHeader.append(kvInputRow.clone());
                    },
                    get : function(){
                        var inputRow = $('#reqHeader ._inputRow');
                        var data = {};
                        for (var i=0; i<inputRow.length; i++) {
                            var key = inputRow.eq(i).find('input[name=key]').val();
                            if(key){
                                data[key] = inputRow.eq(i).find('input[name=value]').val()
                            }
                        }
                        return data;
                    }
                },
                'reqBody' : {
                    put : function(data){
                        var reqBody = $('#reqBody');
                        reqBody.html('');
                        if(data){
                            for (var x in data) {
                                var inp = kvInputRow.clone();
                                inp.find('input[name=key]').val(x);
                                inp.find('input[name=value]').val(data[x]);
                                reqBody.append(inp);
                            }
                        }
                        reqBody.append(kvInputRow.clone());
                    },
                    get : function(){
                        var inputRow = $('#reqBody ._inputRow');
                        var data = {};
                        for (var i=0; i<inputRow.length; i++) {
                            var key = inputRow.eq(i).find('input[name=key]').val();
                            if(key){
                                data[key] = inputRow.eq(i).find('input[name=value]').val()
                            }
                        }
                        return data;
                    }
                }
                //'description' : function(data){}
            }
            /*
             渲染页面调试数据
             data = {
                 "_id":"5735f0e72198126a06b11b58",
                 "title":"测试地址",
                 "url":"http://localhost:3000/apis/add",
                 "method":"GET",
                 "authorId":"5731f03c41f193dc038e7657",
                 "itemId":"572c01e9017a23540c584824",
                 "__v":0,
                 "createTime":"2016-05-13T15:21:11.860Z",
                 "resHeader":"",
                 "reqHeader":{"TOKEN":"hoaihfoiuaheaneafphgo"},
                 "resBody":"",
                 "reqBody":"",
                 "params":[],
                 "description":"本项目的添加接口"
             }
            */
            var renderApiData = function(data){
                //apiDataDiv清空,存放不渲染数据
                apiDataDiv.html('');
                for(var x in data){
                    if(apiDataMapFunc[x]) {
                        apiDataMapFunc[x]['put'](data[x]);
                    }else{
                        var inp = apiDataInput.clone();
                        apiDataDiv.append(inp.attr({'name': x, 'value': data[x]}));
                    }
                }
            }

            var getterApiData = function(){
                var data = {};
                for(var x in apiDataMapFunc){
                    data[x] = apiDataMapFunc[x].get();
                }
                var inputs = apiDataDiv.find('input');
                for (var i=0; i<inputs.length; i++) {
                    data[inputs.eq(i).attr('name')] = inputs.eq(i).val();
                }
                return data;
            }

            var request = function(){
                var data = getterApiData();
                $.ajax({
                    'url' : apiAddress.sendReuest,
                    'async' : 'true',
                    'method' : 'POST',
                    //'data' : {'data' : JSON.stringify(data)},
                    'data' : JSON.stringify(data),
                    'dataType' : "json",
                    'contentType': "application/json; charset=utf-8",
                    'success' : function(msg){
                        console.log(msg)
                        if(msg.errno!=0){
                            alert(msg.msg);
                        }else{
                            //console.log(msg)
                        }
                    },
                    'error' : function(err){
                        alert('请求好像出错了');
                    },
                    'timeout' : 30000,
                });

            }


            this.ajax = function(url, method, data, callback){
                $.ajax({
                    'url' : url,
                    'async' : 'true',
                    'method' : method,
                    'data' : data,
                    'dataType' : "json",
                    'success' : callback,
                    'error' : function(err){
                        alert('请求好像出错了');
                    },
                    'timeout' : 30000,
                });
            }

            this.init = function(){
                getApiListByItemId(itemId);
                getApiListByHistory(itemId);
                $('div._inputDiv')
                        .on('click', 'span.glyphicon-remove', paramsRemove)
                        .on('focus', 'input[name=key]', createInput);
                $('#apiList').on('click', 'li', getApiData);
                $('#historyList').on('click', 'li', getHistoryData);
                $('#send').on('click', request);
            }

            this.init();

        })(itemId, apiId);

    </script>
</div>
</body>
</html>
